buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://raw.githubusercontent.com/Argelbargel/gradle-jpi-plugin/mvn-repo/' }
    }

    dependencies {
        classpath 'argelbargel.gradle.plugins:gradle-jpi-plugin:+'
    }
}

apply plugin: 'org.jenkins-ci.jpi'
apply plugin: 'maven-publish'


archivesBaseName = 'modules'
group = 'argelbargel.jenkins.plugins'
description = 'Jenkins plugin modelling modules'
if (project.hasProperty('release') && project.getProperty('release') != '') {
    version = project.getProperty('release')
}

artifacts {
    archives war
}

publishing {
    repositories {
        maven {
            url "$buildDir/repo"
        }
    }

    publications {
        plugin(MavenPublication) {
            artifact war
        }
    }
}


sourceCompatibility = 1.7
targetCompatibility = 1.7

jenkinsPlugin {
    // version of Jenkins core this plugin depends on, must be 1.420 or later
    coreVersion = '2.7.3'

    // ID of the plugin, defaults to the project name without trailing '-plugin'
    shortName = 'modules'

    // human-readable name of plugin
    displayName = 'Jenkins Modules-Plugin'

    // URL for plugin on Jenkins wiki or elsewhere
    url = 'http://wiki.jenkins-ci.org/display/JENKINS/SomePluginPage'

    // plugin URL on GitHub, optional
    gitHubUrl = 'https://github.com/jenkinsci/some-plugin'

    // use the plugin class loader before the core class loader, defaults to false
    pluginFirstClassLoader = true

    // set the directory from which the development server will run, defaults to 'work'
    workDir = file("$buildDir/jenkins")

    // URL used to deploy the plugin, defaults to the value shown
    repoUrl = 'https://repo.jenkins-ci.org/releases'

    // URL used to deploy snapshots of the plugin, defaults to the value shown
    snapshotRepoUrl = 'https://repo.jenkins-ci.org/snapshots'

    // enable injection of additional tests for checking the syntax of Jelly and other things
    disabledTestInjection = false

    // the output directory for the localizer task relative to the project root, defaults to the value shown
    localizerOutputDir = "${project.buildDir}/generated-src/localizer"

    // disable configuration of Maven Central, the local Maven cache and the Jenkins Maven repository, defaults to true
    configureRepositories = true

    // skip configuration of publications and repositories for the Maven Publishing plugin, defaults to true
    configurePublishing = false

    // the developers section is optional, and corresponds to the POM developers section
    developers {
        developer {
            id 'argelbargel'
            name 'Karsten Kraus'
            email 'karsten.kraus@web.de'
        }
    }

    // the licenses section is optional, and corresponds to the POM licenses section
    licenses {
        license {
            name 'Apache License, Version 2.0'
            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
            comments 'A business-friendly OSS license'
        }
    }
}

dependencies {
    optionalJenkinsPlugins 'org.jenkins-ci.plugins:buildgraph-view:1.6@jar'
    optionalJenkinsPlugins 'org.jenkins-ci.plugins.workflow:workflow-aggregator:2.5@jar'
    optionalJenkinsPlugins 'org.jenkins-ci.plugins.workflow:workflow-job:2.11@jar'
    optionalJenkinsPlugins 'org.jenkins-ci.plugins.workflow:workflow-api:2.13@jar'
    optionalJenkinsPlugins 'org.jenkins-ci.plugins.workflow:workflow-cps:2.30@jar'
}
